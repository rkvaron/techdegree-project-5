// ==========================================================================
// MIXINS styles
// ==========================================================================

// Set bg-colors in elements
@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}

//Media query mixin
@mixin mq($break) {
  @if $break == 'small' {
    @media (max-width: $brkpoint--md) {
      @contet;
    }
  }
  @else if $break == 'medium' {
    @media (min-width: $brkpoint--md + 1) {
      @content;
    }
  }
  @else if $break == 'large' {
    @media (min-width: $brkpoint--lg) {
      @content;
    }
  }
  @else {
    @error "No value could be retrieved for `#{$break}`. "
  }
}

//Grid columns
@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    //generat column modifier classes
    &--#{$i} {
      width: percentage($target/$context);
    }
  }
}


// Flexbox settings

@mixin flexbox($display: flex,  $flex-direction: null, $flex-wrap: null, $justify-content: null,) {
  display: $display;
  flex-direction: $flex-direction;
  flex-wrap: $flex-wrap;
  justify-content: $justify-content;
}
//Element and Modifier BEM Selectors

@mixin e($element){
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier){
  &--#{$modifier} {
    @content;
  }
}

//Adjacent sibling margins for grid
@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}
